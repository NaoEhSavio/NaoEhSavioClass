//Char and String

// Charactere Type
// Alias for U16
Char: Type
  U16


//Syntax Sugar for U16
  //0#16, 1#16, 2#16 ...


//Syntax Sugar for Char
  //'0', '1', '2' ... 

//Ascii Table from Wikipedia:
// https://upload.wikimedia.org/wikipedia/commons/1/1b/ASCII-Table-wide.svg

//  _________________________________________
// | U16 Syntax Sugar   | Char Syntax Sugar  |  
// |--------------------|--------------------|
// |     72#16          |      'H'           |
// |    101#16          |      'e'           |
// |    121#16          |      'y'           |
//  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

//Verifies if the character is Upper Case

//is_upper('a') -> Bool.false
//is_upper('A') -> Bool.true
//is_upper('0') -> Bool.false
is_upper(x: Char): Bool
 case U16.gte(x, 65){
   true: U16.lte(x, 90)
   false: false
 }

//Verifies if the character is Lower Case

//is_lower('a') -> Bool.true
//is_lower('A') -> Bool.false
//is_lower('0') -> Bool.false
is_lower(x: Char): Bool
 case U16.gte(x, 97){
   true: U16.lte(x, 122)
   false: false
 }




//Verifies if the character is a Number-Digit Value

//is_digit('a') -> Bool.false
//is_digit('A') -> Bool.false
//is_digit('0') -> Bool.true
is_digit(x: Char): Bool
 case U16.gte(x, 48){
   true: U16.lte(x, 57)
   false: false
 }


//Verifies if both of the Characters are the same

//is_equal('a', 'A') -> Bool.false
//is_equal('A', '0') -> Bool.false
//is_equal('0', '0') -> Bool.true
equal(x: Char, y: Char): Bool
  U16.eql(x,y)



//Transforms Characters into Nat digits

//to_digit('0') -> Nat.zero
//to_digit('1') -> Nat.succ(Nat.zero)
//to_digit('4') -> 4
to_digit(x: Char): Nat
let t = U16.to_nat(x)
  case is_digit(x){
    true: Nat.sub(t,48)
    false: t
  }

//Transforms all Characters into Lower Case Characters

//to_lower('A') -> 'a'
//to_lower('B') -> 'b'
//to_lower('Z') -> 'z'
to_lower(x: Char): Char
  case U16.gte(x, 65){
   true: case U16.lte(x, 95){
     true: U16.add(x,32)
     false: x
   }
   false: x
  }



//Transforms all Characters into Upper Case Characters

//to_upper('a') -> 'A' 
//to_upper('b') -> 'B'
//to_upper('z') -> 'Z'
to_upper(x: Char): Char
  case U16.gte(x, 97){
   true: case U16.lte(x, 122){
     true: U16.sub(x,32)
     false: x
   }
   false: x
  }





//String Type
type String { 
  nil,
  cons(head: Char, tail: String)
}

//Without Syntax Sugar for String
//a = String.cons('H', String.cons('I', String.nil))
//b = String.cons('H', String.cons('e', String.cons('l', String.cons('l', String.cons('o', String.nil)))))
//c = String.cons('t', String.cons('e', String.cons('x', String.cons('t', String.nil))))

//Syntax Sugar for String
//a = "HI"
      
//b = "Hello"
//c = "text"



//Concatenates two Strings into one

//concat(a,b) -> "HiHello"
//concat(b,c) -> "Hellotext"
concat(xs: String, ys: String): String
  case xs {
    nil: ys
    cons: case ys {
      nil: xs
      cons: String.cons(xs.head, concat(xs.tail, ys))
    }
  }



//Applies a Function to all Characters of the String

//map(to_lower, a) -> "hi"
map(fn: Char -> Char, xs: String): String
  case xs {
    nil: String.nil
    cons: String.cons(fn(xs.head), map(fn, xs.tail))
  }



//Converts all Lower Case Caracters in a String to Upper Case

//string_to_upper(c) -> "TEXT"
string_to_upper(xs: String): String
  case xs {
    nil: String.nil
    cons: case is_lower(xs.head){
      true: String.cons(to_upper(xs.head), string_to_upper(xs.tail))
      false: string_to_upper(xs.tail)
    } 
  }


//Convers the String into bits

//to_bits(a) -> "0000000001001001 0000000001001000"
//to_bits(b) -> "0000000001101111 0000000001101100 00000000011011000 000000001100101 0000000001001000"
//to_bits(c) -> "0000000001110100 0000000001111000 00000000011001010 000000001110100"
to_bit(x: Char): Bits
let t = U16.to_bits(x)
    t

to_bits(xs: String): Bits
  case xs {
    nil: Bits.e
    cons: Bits.concat(to_bit(xs.head), to_bits(xs.tail))
    } 





//Verifies if two Strings are Equal

//stringequal(a, a) -> Bool.true
//stringequal(a, b) -> Bool.false
//stringequal(b, c) -> Bool.false
stringequal(xs: String, ys: String): Bool
  case xs {
    nil: case ys {
      nil: Bool.true
      cons: Bool.false
    }
    cons: case ys{
      nil: Bool.false
      cons: Bool.and(equal(xs.head, ys.head), stringequal(xs.tail, ys.tail))
    }
  }



//Verifies if All String elements are Numbers

//is_nat(a)      -> Bool.false
//is_nat(b)      -> Bool.false
//is_nat("1234") -> Bool.true
is_nat(xs: String): Bool
  case xs {
    nil: Bool.false
    cons: case xs.tail{
      nil:  is_digit(xs.head)
      cons: case is_digit(xs.head){
        true: is_nat(xs.tail)
        false: Bool.false
      }
    } 
  }
// Takes any elements while the condition is matched.
//take_while(is_upper,    a) -> "HI"
//take_while(is_lower,    b) -> ""
//take_while(is_equal('t'), c) -> "t"

take_while(cond: Char -> Bool, xs: String): String
  case xs {
    nil: String.nil
    cons: case cond(xs.head){
      true: String.cons(xs.head, take_while(cond, xs.tail))
      false: String.nil //take_while(cond, xs.tail)
    }
  }



//Finds the index of the head for the first occurence if any of the Characters are equal

//find(a, "H") -> Maybe.some(1)
//find(b, "l") -> Maybe.some(2)
//find(c, "x") -> Maybe.some(1)
//find(c, "z") -> Maybe.none
incM(a: Maybe<Nat>): Maybe<Nat>
  case a {
    none: Maybe.none<Nat>
    some: Maybe.some<Nat>(Nat.succ(a.value))
  }

find(xs: String, x: Char): Maybe<Nat>
  case xs {
    nil: Maybe.none<Nat>
    cons: case equal(xs.head, x) {
        true: 
        // log(Char.to_string(xs.head))
        Maybe.some<Nat>(Nat.zero)
        false: incM(find(xs.tail, x))
      }
    }  
  //   cons: case equal(xs.head, x){
  //     true: 
  //       let n = Nat.zero          
  //       Maybe.join!(Maybe.some<Nat>(Nat.succ(n)), find(xs.tail, x))
  //     false: find(xs.tail, x)
  //   }
  // }


//Filters the String and discards all the Chars that doesn't satisfy given condition 

//filter(is_upper,      a) -> "HI"
//filter(is_lower,      b) -> "ello"
//filter(is_equal('t'), c) -> "tt"
filter(cond: Char -> Bool, xs: String): String
  case xs {
    nil: String.nil
    cons: case cond(xs.head){
      true: concat(Char.to_string(xs.head), filter(cond, xs.tail)) 
      false: filter(cond, xs.tail)
    }
  }


//Concatenates all elements of a List of Strings

//flatten([a,b,c]) -> "HIHellotext"
flatten(lxs: List<String>): String
  case lxs {
    nil: String.nil
    cons: concat(lxs.head, flatten(lxs.tail))
    // lxs.head: String
    // lxs.tail: List(String)
  }



//Drops a n Number of characteres from a String

//drop(1, a) -> "I"
//drop(2, b) -> "llo"
//drop(3, c) -> "t"
drop(n: Nat, xs: String): String
  case n {
    zero: xs
    succ: case xs {
      nil: String.nil
      cons: drop(n.pred, xs.tail) 
    }
  }




//Takes n elements of a String

//take(1, a) ->  "H"
//take(2, b) ->  "He"
//take(3, c) ->  "tex"
take(n: Nat xs: String): String
 case n {
   zero: String.nil
   succ: case xs {
     nil: String.nil
     cons: concat(Char.to_string(xs.head), take(n.pred, xs.tail))
   } 
 }

dec(a: Nat): Nat
  case a {
    zero: a
    succ: a.pred 
  }
//Takes a x part of the string after a n Index of values get dropped
//slice(1, 2, a) -> "I"
//slice(2, 4, b) -> "ll"
//slice(1, 3, c) -> "ex"
slice(n: Nat, x: Nat, xs: String): String
 //drop(n (take(x, xs))) /// mais facil kkk
  let z = Nat.zero
  case xs {
    nil: String.nil
    cons: case Nat.eql(z,n){
      true: case Nat.eql(n,x){
        true: String.nil
        false: String.cons(xs.head, slice(n, dec(x), xs.tail))
      }
      false:slice(dec(n), dec(x), xs.tail)
    }
  }
// Final Boss



// Divides the elements of a String into a list, using a match you decide
//split(b, "l")                                   -> ["He","" , "o"
//split("Split example with matching space", " ") -> ["Split,example,with,matching,space]
//split("You are awesome!", " ")                  -> ["You","are","awesome!"]
split(xs: String, match: String): List<String>
  split.go(xs, match, "")

split.go(xs: String, match: String, acum: String): List<String>
  case xs {
    nil: List.cons<String>(acum,List.nil<String>)
    cons:  case match {
      nil: List.cons<String>(xs,List.nil<String>)
      cons: case stringequal(match, take(String.length(match), xs)){
        true: List.cons<String>(acum, split.go(drop(String.length(match), xs), match, ""))
        false: split.go(xs.tail, match, concat(acum, Char.to_string(xs.head)))
      }
    }
  }
  // case xs {
  //   nil: List.cons<String>(acum,List.nil<String>)
  //   //List.nil<String> 
  //   cons: 
  //   case match {
  //     nil: List.nil<String>
  //     cons: case equal(xs.head, match.head){// vou fazer o com String
  //       true: 
  //         List.cons<String>(acum, split.go(xs.tail, match, ""))
  //       false:
  //         let acum = concat(acum, Char.to_string(xs.head))
  //         log(acum)
  //         log(xs.tail)
  //         split.go(xs.tail, match, acum)
  //     }
  //   }
  // }

ex_10:_
    List.show!((x)x split("Split example with matching space", ""))
    // split("Hello", "l")                             // -> ["He","" , "o"
    // split("Split example with matching space", " ") // -> ["Split,example,with,matching,space]
    // split("You are awesome!", " ")                  // -> ["You","are","awesome!"]
// ex_10: IO<Unit>
//   IO {
//     Tests._10.is_upper(is_upper)
//     Tests._10.is_lower(is_lower)
//     Tests._10.is_digit(is_digit)
//     Tests._10.equal(equal)
//     Tests._10.to_digit(to_digit)
//     Tests._10.to_lower(to_lower)
//     Tests._10.to_upper(to_upper)
//     Tests._10.concat(concat)
//     Tests._10.drop(drop)
//     Tests._10.take(take)
//     Tests._10.slice(slice)
//     Tests._10.filter(filter)
//     Tests._10.map(map)
//     Tests._10.string_to_upper(string_to_upper)
//     Tests._10.to_bits(to_bits)
//     Tests._10.stringequal(stringequal)
//     Tests._10.is_nat(is_nat)
//     Tests._10.take_while(take_while)
//     Tests._10.find(find)
//     Tests._10.flatten(flatten)
//     Tests._10.split(split)
//   }
