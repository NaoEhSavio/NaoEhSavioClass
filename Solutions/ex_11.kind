// ListMap Exercises

type ListMap <A: Type> { 
  empty
  cons(head: Pair<Nat, A>, tail: ListMap<A>)
}

// Inserts a value
// If the key is already present, its value is updated
// If the key is not present, the value is added to the map
set<A: Type>(key: Nat, value: A, lm: ListMap<A>): ListMap<A>
  case lm {
    empty: ListMap.cons<A>(Pair.new<Nat, A>(key,value),ListMap.empty<A>)
    cons: case Nat.eql(lm.head@fst, key){
      true: ListMap.cons<A>(Pair.new<Nat, A>(key,value), lm.tail)
      false: ListMap.cons<A>(lm.head, set<A>(key, value, lm.tail))
    }
  }

// Returns a Value from a Key
// If the key is not present, returns None
get<A: Type>(key: Nat, lm: ListMap<A>): Maybe<A>
     case lm {
        empty: Maybe.none<A>
        cons: case Nat.eql(lm.head@fst, key){
                true: Maybe.some<A>(lm.head@snd)
                false: get<A>(key, lm.tail)
            }
    } 


// Applies a function to a Value from a Key
// Returns the same ListMap if the key is not present 
mut<A: Type>(key: Nat, fn: A -> A, lm: ListMap<A>): ListMap<A>
  case lm {
    empty: ListMap.empty<A>
    cons: case Nat.eql(lm.head@fst, key){
      true: ListMap.cons<A>(Pair.new<Nat, A>(key,fn(lm.head@snd)), mut<A>(key, fn, lm.tail))
      false: ListMap.cons<A>(lm.head, mut<A>(key, fn, lm.tail))
    }
  }

// Converts the ListMap to a String
// show<A: Type>(fn: A -> String, lm: ListMap<A>): String
//   case lm {
//     empty: "[]"
//     cons: "[" | Pair.show<Nat, A>(Nat.show, fn, (lm.head)) | show<A>(fn, lm.tail) 
//   }

show<A: Type>(fn: A -> String, lm: ListMap<A>): String
  case lm {
    empty: "[]"
    cons: "{" | Nat.show(lm.head@fst) | "," | fn(lm.head@snd) | "}" | show<A>(fn, lm.tail)
  }

// Checks if the ListMap has a key
// Returns true if the key is present, false otherwise
has<A:Type>(key: Nat, lm: ListMap<A>): Bool
  case lm {
    empty: Bool.false
    cons: case Nat.eql(lm.head@fst, key) {
      true: Bool.true
      false: has<A>(key, lm.tail)
    }
  }

// Removes all Elements that doesn't satisfy a condition
filter<A: Type>(cond: A -> Bool, lm: ListMap<A>): ListMap<A>
  case lm {
    empty: ListMap.empty<A>
    cons: case cond(lm.head@snd){
      true: ListMap.cons<A>(lm.head, filter<A>(cond, lm.tail))
      false: filter<A>(cond, lm.tail)
    }
  }

// Applies a function to all Values
map<A: Type, B: Type>(fn: A -> B, lm: ListMap<A>): ListMap<B>
  case lm {
    empty: ListMap.empty<B>
    cons: ListMap.cons<B>(Pair.new<Nat, B>(lm.head@fst, fn(lm.head@snd)), map<A,B>(fn, lm.tail))
  }


TestMapSucc: ListMap<Nat>
  ListMap.cons<Nat>(({0,  6})
  ListMap.cons<Nat>(({1,  7})
  ListMap.cons<Nat>(({2,  8})
  ListMap.cons<Nat>(({3,  9})
  ListMap.cons<Nat>(({4, 10})
  ListMap.cons<Nat>(({5, 11})
  ListMap.empty<Nat>))))))
  
stress_test(sets: Nat, gets: Nat): IO<Unit>
  Tests.stress.lmap(sets, gets)

// ex_11: String
//   show!(get(1, TestMapSucc))
ex_11: IO<Unit>
  IO {
    Tests._11.set(set)
    Tests._11.get(get)
    Tests._11.mut(mut)
    Tests._11.has(has)
    Tests._11.filter(filter)
    Tests._11.map(map)
  } 
