// type MaybeBool
// It maybe holds a Boolean inside it
Bool : Type
Bool.true : Bool
Bool.false : Bool

MaybeBool : Type
MaybeBool.none : MaybeBool
MaybeBool.some (value: Bool) : MaybeBool

// Returns true if Maybe is none
Is_none(a: MaybeBool): Bool
Is_none MaybeBool.none = Bool.true
Is_none (MaybeBool.some a) = Bool.false

// Returns true if Maybe is some
Is_some(a: MaybeBool): Bool
Is_some MaybeBool.none = Bool.false
Is_some (MaybeBool.some a) = Bool.true

// Returns true if both inputs are identical
// eql(MaybeBool.none,             MaybeBool.none            ) -> true
// eql(MaybeBool.some(Bool.false), MaybeBool.none            ) -> false
// eql(MaybeBool.some(Bool.true),  MaybeBool.some(Bool.false)) -> false
// eql(MaybeBool.some(Bool.false), MaybeBool.some(Bool.false)) -> true
MaybeBool.eql (a: MaybeBool) (b:MaybeBool) : Bool
MaybeBool.eql MaybeBool.none              MaybeBool.none              = Bool.true
MaybeBool.eql (MaybeBool.some Bool.true)  (MaybeBool.some Bool.true)  = Bool.true 
MaybeBool.eql (MaybeBool.some Bool.false) (MaybeBool.some Bool.false) = Bool.true 
MaybeBool.eql a                           b                           = Bool.false
// MaybeBool.eql (MaybeBool.some a) (MaybeBool.some b) = (Bool.if (Bool.eql a b) Bool.true Bool.false)
                                                    //if (Bool.eql a b) {Bool.true} else {Bool.false}
// Returns the value inside the MaybeBool.
// If there is no value contained, returns v instead
MaybeBool.extract (a: MaybeBool) (v: Bool) : Bool
MaybeBool.extract   MaybeBool.none   v = v 
MaybeBool.extract (MaybeBool.some a) v  = a
 
// Create a MaybeBool from a Boolean
// create(Bool.false) -> MaybeBool(Bool.false)
MaybeBool.create (a: Bool) : MaybeBool
MaybeBool.create a         = (MaybeBool.some a) 

// Returns the first input that is a MaybeBool.some
// Returns MaybeBool.none if both are MaybeBool.none
MaybeBool.or (a: MaybeBool) (b: MaybeBool): MaybeBool
MaybeBool.or  MaybeBool.none    MaybeBool.none      = MaybeBool.none
MaybeBool.or  MaybeBool.none    (MaybeBool.some b)  = (MaybeBool.some b)
MaybeBool.or (MaybeBool.some a) MaybeBool.none      = (MaybeBool.some a)
MaybeBool.or (MaybeBool.some a) (MaybeBool.some b)  = (MaybeBool.some a)

Main {
  let a = (MaybeBool.none)
  let b = (MaybeBool.some(Bool.true))
  let c = (MaybeBool.some(Bool.false))
  let d = Bool.true
  let e = Bool.false
  // (MaybeBool.extract a c)
  (MaybeBool.eql c c)
}