Bool : Type
Bool.true : Bool
Bool.false : Bool

Bool.is_true (a: Bool) : Bool
Bool.is_true a = a

Bool.is_false (a: Bool) : Bool
Bool.is_false Bool.true = Bool.false
Bool.is_false Bool.false = Bool.true

Bool.not (a: Bool) : Bool
Bool.not a = (Bool.is_false a)

Bool.and (a: Bool) (b: Bool) : Bool
Bool.and Bool.true  Bool.true  = Bool.true
Bool.and a b  = Bool.false

Bool.or (a: Bool) (b: Bool) : Bool
Bool.or Bool.false Bool.false = Bool.false
Bool.or a b = Bool.true

Bool.eql (a: Bool) (b: Bool) : Bool
Bool.eql Bool.false Bool.true = Bool.false
Bool.eql Bool.true Bool.false = Bool.false
Bool.eql a b = Bool.true

Bool.xor (a: Bool) (b: Bool) : Bool
Bool.xor Bool.true Bool.false = Bool.true
Bool.xor Bool.false Bool.true = Bool.true
Bool.xor a b = Bool.false

Bool.nor (a: Bool) (b: Bool) : Bool
Bool.nor Bool.false Bool.false = Bool.true
Bool.nor a b = Bool.false

Bool.nand (a: Bool) (b: Bool) : Bool
Bool.nand Bool.true Bool.true = Bool.false
Bool.nand a b = Bool.true

Bool.xnor (a: Bool) (b: Bool) : Bool
Bool.xnor a b = (Bool.eql a b)

Bool.if <r: Type> (b: Bool) (if_t: r) (if_f: r) : r
Bool.if r Bool.true  if_t if_f = if_t
Bool.if r Bool.false if_t if_f = if_f

Main {
  let a = Bool.true
  let b = Bool.false 
  (Bool.eql  Bool.true Bool.false)
}