// Nat
// ---
Nat : Type
Nat.zero : Nat
Nat.succ (pred: Nat) : Nat

Nat.double (x: Nat) : Nat
Nat.double (Nat.succ x) = (Nat.succ (Nat.succ (Nat.double x)))
Nat.double (Nat.zero)   = (Nat.zero)

Nat.add (a: Nat) (b: Nat) : Nat
Nat.add (Nat.succ a) b = (Nat.succ (Nat.add a b))
Nat.add Nat.zero     b = b

Nat.sub (a: Nat) (b: Nat) : Nat
Nat.sub Nat.zero b = (Nat.zero)
Nat.sub a Nat.zero = a
Nat.sub (Nat.succ a) (Nat.succ b) = (Nat.sub a b) // GZSR ajudou!!!

Nat.mul (a: Nat) (b: Nat) : Nat
Nat.mul Nat.zero     b = (Nat.zero)                // 0 b = 0
Nat.mul (Nat.succ a) b = (Nat.add (Nat.mul a b) b) // (a + 1) * b = a*b + b

Nat.fac (a: Nat) : Nat
Nat.fac Nat.zero    = (Nat.succ (Nat.zero))
Nat.fac (Nat.succ a) = (Nat.mul (Nat.fac a) (Nat.succ a))

Bool : Type
Bool.true : Bool
Bool.false : Bool

Bool.is_true (a: Bool) : Bool
Bool.is_true Bool.true = Bool.true
Bool.is_true Bool.false = Bool.false

Bool.if <a: Type> (b: Bool) (t: a) (f: a) : a
Bool.if a Bool.true  t f = t
Bool.if a Bool.false t f = f

Nat.eql (a: Nat) (b: Nat): Bool
Nat.eql Nat.zero Nat.zero = Bool.true
Nat.eql a        Nat.zero = Bool.false
Nat.eql Nat.zero b        = Bool.false
Nat.eql (Nat.succ a) (Nat.succ b) = (Nat.eql a b)

Nat.gtn (a: Nat) (b: Nat): Bool
Nat.gtn Nat.zero Nat.zero = Bool.false
Nat.gtn a        Nat.zero = Bool.true
Nat.gtn Nat.zero b        = Bool.false
Nat.gtn (Nat.succ a) (Nat.succ b) = (Nat.gtn a b)

Nat.ltn (a: Nat) (b: Nat): Bool
Nat.ltn Nat.zero Nat.zero = Bool.false
Nat.ltn a        Nat.zero = Bool.false
Nat.ltn Nat.zero b        = Bool.true
Nat.ltn (Nat.succ a) (Nat.succ b) = (Nat.ltn a b)

Nat.min (a: Nat) (b: Nat): Nat
Nat.min a b = if (Nat.ltn a b) { a } else { b }

Nat.max (a: Nat) (b: Nat): Nat
Nat.max a b = if (Nat.gtn a b) { a } else { b }

Nat.hlf (a: Nat) : Nat
Nat.hlf (Nat.zero)             = (Nat.zero)
Nat.hlf (Nat.succ(Nat.zero))   = (Nat.zero) 
Nat.hlf (Nat.succ(Nat.succ a)) = (Nat.succ( Nat.hlf a))
                    
Nat.div (a: Nat) (b: Nat) : Nat
Nat.div Nat.zero      Nat.zero = Nat.zero
Nat.div a             Nat.zero = Nat.zero
Nat.div Nat.zero      b        = Nat.zero
Nat.div a             b        = Bool.if (Nat.ltn a b) (Nat.zero) (Nat.succ( Nat.div( Nat.sub a b) b))
// Nat.div (Nat.succ a)  (Nat.succ b)  = (Nat.succ( Nat.div( Nat.sub a b) b))

Nat.to_u60 (n: Nat) : U60
Nat.to_u60 Nat.zero     = 0
Nat.to_u60 (Nat.succ n) = (+ 1 (Nat.to_u60 n))
  
List (a: Type) : Type
List.nil <a> : (List a)
List.cons <a> (x: a) (xs: (List a)) : (List a)

List.pure <t: Type> (x: t) : (List t)
List.pure t x = (List.cons t x (List.nil t))

Example.U60 : (List(List U60)) {
  do List{
    let s = (Nat.to_u60 (Nat.min (Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero))))) (Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero)))))) )))
    let u = (Nat.to_u60 (Nat.fac (Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero)))))))
    let v = (Nat.to_u60 (Nat.hlf (Nat.succ(Nat.succ(Nat.succ(Nat.zero))))))
    let x = (Nat.to_u60 (Nat.add (Nat.succ(Nat.zero)) (Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero)))))))))
    let x2 = (Nat.to_u60 (Nat.div (Nat.succ(Nat.zero)) (Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero)))))))))
    let x3 = (Nat.to_u60 (Nat.div (Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero))))))) (Nat.succ(Nat.zero))))
    let x4 = (Nat.to_u60 (Nat.div (Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero))))))) (Nat.succ(Nat.succ(Nat.zero)))))
    let x5 = (Nat.to_u60 (Nat.div (Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero))))))) (Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero)))))))))
    let x6 = (Nat.to_u60 (Nat.div (Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero))))))) (Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero))))))))
    let y = (Nat.to_u60 (Nat.double (Nat.succ(Nat.zero))))
    let w = (Nat.to_u60 (Nat.sub (Nat.succ(Nat.zero)) (Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero))))))))) 
    let z = (Nat.to_u60 (Nat.sub (Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero))))))) (Nat.succ(Nat.zero))))
    return [s, u, v, x, x2, x3, x4, x5, x6, y, w, z]
  }
}

Example.bool : (List(List Bool)) {
  do List{
    let a = (Nat.eql (Nat.succ(Nat.succ(Nat.succ(Nat.zero)))) (Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero))))))
    let b = (Nat.ltn (Nat.succ(Nat.succ(Nat.succ(Nat.zero)))) (Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero))))))
    let c = (Nat.gtn (Nat.succ(Nat.succ(Nat.succ(Nat.zero)))) (Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero))))))
    return [a, b , c]
  }
}

Pair (a: Type) (b: Type) : Type
Pair.new <a> <b> (fst: a) (snd: b) : (Pair a b) 

Main {
  let a = Example.U60
  let b = Example.bool
  let c = (Pair.new a b) 
  c
}


// Nat.ltn a b = match Bool x = (algo ...) {
//   true  => ...
//   false => ...
// }
// como Ã© bool, pode usar if
// Nat.ltn a b = if (algo ...) { ... } else { ... }
// Double (x: Nat) : Nat {
//   match x {
//     zero => Nat.zero
//     succ => (Nat.succ (Nat.succ (Double x.pred)))
//   }
// }
