// BitsMap Exercises
BitsMap <a> : Type 
BitsMap.new <a> : (BitsMap a)
BitsMap.tie <a> (value: (Maybe a)) (lft: (BitsMap a)) (rgt: (BitsMap a)) : (BitsMap a)

// Given a Key and a Value, sets the given value to that key in the tree
// Creates new keys if they don't already exist in the map
// If there already is a value for the given key, updates it.
BitsMap.set <a> (key: Bits) (value: a) (bm: BitsMap a) : (BitsMap a)
BitsMap.set key value bm = ?

// Given a key, gets the value that correspond to the given key, 
// If there it is no value for the key, returns Maybe.none<A>
BitsMap.get <a> (key: Bits) (bm: BitsMap a) : (Maybe a)
BitsMap.get a key bm = ?

//Applies a function to a Value of the specific key and returns the same map but
//with the specific value applied to the function
//If the value isn't found, this function doesn't change the map
BitsMap.mut <a> (key: Bits) (f: a -> a) (bm: BitsMap a) : (BitsMap a)
BitsMap.mut key f bm = ?

//Deletes a Value of the map within the given key
//Returns the same map if no value is found for that key
//Receives:
  // key of the type Bits
  // map of the type BitsMap<A>
  // returns the modified BitsMap<A>

//Returns whether or not the map has a value for a given key
//When there is a value, returns true
//When there is no value or the key is not in the map, returns false
//Receives:
  // key of the type Bits
  // map of the type BitsMap<A>
  // returns a Bool

BitsMap.show <a> (show: a -> String)  (bitsmap: BitsMap a) : String
BitsMap.show show bm = ?

//Verifies all values of the map and if they don't match the condition gets
//removed, if the condition is matched, the value and the key are kept
BitsMap.filter <a> (cond: a -> Bool) (bm: BitsMap a) : (BitsMap a)
BitsMap.filter cond bm = ? 

//Applies a function to  all values of the map and returns the map modified 
BitsMap.map <a> <b> (f: a -> b) (bm: BitsMap a) : (BitsMap b)
BitsMap.map f bm = ?

// Returns a list of keys with all Keys of the map
BitsMap.key <a> (bm: BitsMap a) : (List Bits) 
BitsMap.key bm = ?

// Unites two different maps into one, keeping its structure
// When both maps have values for the same key, keeps the one from a
BitsMap.union <a> (bma: BitsMap a) (bmb: BitsMap a) : (BitsMap a) 
BitsMap.union bma bmb = ?

// Main {
// }
