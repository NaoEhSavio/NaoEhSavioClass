//Bits
//File for exercises in Bits
//e = empty
//o = 0
//i = 1
Bits  : Type
Bits.e  : Bits
Bits.o  (pred: Bits) : Bits
Bits.i  (pred: Bits) : Bits

// //Verifies if it is an Empty Bit
//is_empty(a)      -> Bool.false
//is_empty(b)      -> Bool.false
//is_empty(c)      -> Bool.false
//is_empty(d)      -> Bool.false
//is_empty(Bits.e) -> Bool.true
Bits.is_empty (b: Bits) : Bool
Bits.is_empty b = ? 

// //Gets the Tail of a Bits structure
//tail(a) -> Bits.i(Bits.e)
//tail(b) -> Bits.i(Bits.i(Bits.e))
//tail(c) -> Bits.o(Bits.i(Bits.i(Bits.e)))
//tail(d) -> Bits.i(Bits.i(Bits.i(Bits.e)))
Bits.tail (b: Bits) : Bits
Bits.tail b = ?

// //Negates all Bits
//notb(a) -> Bits.o(Bits.o(Bits.e))
//notb(b) -> Bits.i(Bits.o(Bits.o(Bits.e)))
//notb(c) -> Bits.i(Bits.i(Bits.o(Bits.o(Bits.e))))
//notb(d) -> Bits.o(Bits.o(Bits.o(Bits.o(Bits.e))))
Bits.notb (b: Bits) : Bits
Bits.notb b = ?

// //Increments a Bit
//inc(a) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//inc(b) -> Bits.i(Bits.i(Bits.i(Bits.e)))
//inc(c) -> Bits.i(Bits.o(Bits.i(Bits.i(Bits.e))))
//inc(d) -> Bits.o(Bits.o(Bits.o(Bits.o(Bits.i(Bits.e)))))
Bits.inc (b: Bits) : Bits
Bits.inc b = ?

// //Decrements a Bit
//dec(a) -> Bits.o(Bits.i(Bits.e))
//dec(b) -> Bits.i(Bits.o(Bits.i(Bits.e)))
//dec(c) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.e))))
//dec(d) -> Bits.o(Bits.i(Bits.i(Bits.i(Bits.e))))
Bits.dec (b: Bits) : Bits
Bits.dec b = ?

// //Concatenate two Bits structures
//concat(a,b) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.i(Bits.e)
//concat(b,c) -> Bits.o(Bits.i(Bits.i(Bits.o(Bits.o(Bits.i(Bits.i(Bits.e)))))))
//concat(c,d) -> Bits.o(Bits.o(Bits.i(Bits.i(Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))))))
Bits.concat (a: Bits) (b: Bits) : Bits
Bits.concat a b = ?

// //Adds two Bits structures
//add(a,b) -> Bits.i(Bits.o(Bits.o(Bits.i(Bits.e))))
//add(b,c) -> Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))))
//add(c,d) -> Bits.i(Bits.i(Bits.o(Bits.i(Bits.i(Bits.e)))))
Bits.add (a: Bits) (b: Bits) : Bits 
Bits.add a b = ?

// //Returns Bits.i if only both bits are Bits.i
//and(a,b) -> Bits.o(Bits.i(Bits.e))
//and(b,c) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//and(c,d) -> Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))
Bits.and (a: Bits) (b: Bits) : Bits
Bits.and a b = ?

// //Returns Bits.i if any of bits are Bits.i
//or(a,b) -> Bits.i(Bits.i(Bits.e))
//or(b,c) -> Bits.o(Bits.i(Bits.i(Bits.i(Bits.e))))
//or(c,d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
Bits.or (a: Bits) (b: Bits) : Bits
Bits.or a b = ?

// //Verifies if both Bit structures are equal
//eql(a,b) -> Bool.false
//eql(b,c) -> Bool.false
//eql(d,d) -> Bool.true
Bits.eql (a: Bits) (b: Bits) : Bool
Bits.eql a b = ?

// //Reverses a Bits structure
// //reverse(a) -> Bits.i(Bits.i(Bits.e))
// //reverse(b) -> Bits.i(Bits.i(Bits.o(Bits.e)))
// //reverse(c) -> Bits.i(Bits.i(Bits.o(Bits.o(Bits.e))))
// //reverse(d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
Bits.reverse (b: Bits) : Bits
Bits.reverse b = ?

// //Gets the length of the Bits structure
//length(a) -> Nat.succ(Nat.succ(Nat.zero))
//length(b) -> Nat.succ(Nat.succ(Nat.succ(Nat.zero)))
//length(c) -> Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero))))
//length(d) -> Nat.succ(Nat.succ(Nat.succ(Nat.succ(Nat.zero))))
Bits.length (bs: Bits) : Nat
Bits.length bs = ?

// //Multiplies two Bits structures
// 0 x 0 = 0
// 0 x 1 = 0
// 1 x 0 = 0
// 1 x 1 = 1
//mul(a,b) -> Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))))
//mul(b,c) -> Bits.o(Bits.o(Bits.o(Bits.i(Bits.o(Bits.o(Bits.i(Bits.e)))))))
Bits.mul (a: Bits) (b: Bits) : Bits
Bits.mul a b = ?

// //Drops a n Number of Bits starting from from the least significative bit
//drop(1, a) -> Bits.i(Bits.e)
//drop(1, b) -> Bits.i(Bits.i(Bits.e))
//drop(1, c) -> Bits.o(Bits.i(Bits.i(Bits.e)))
//drop(1, d) -> Bits.i(Bits.i(Bits.i(Bits.e)))
Bits.drop (n: Nat) (bs: Bits) : Bits
Bits.drop n bs = ?

// //Takes n Bits from the structure, starting from the least significative bit
//take(1, a) -> Bits.i(Bits.e)
//take(2, b) -> Bits.o(Bits.i(Bits.e))
//take(3, c) -> Bits.o(Bits.o(Bits.i(Bits.e)))
//take(4, d) -> Bits.i(Bits.i(Bits.i(Bits.i(Bits.e))))
Bits.take (n: Nat) (bs: Bits) : Bits
Bits.take n bs = ?

// Main {
  // let a = Bits.e
  // let b = Bits.i(Bits.i(Bits.e))
  // let c = Bits.o(Bits.i(Bits.i(Bits.e)))
  // let d = Bits.o(Bits.o(Bits.i(Bits.i(Bits.e))))
  // let e = Bits.i(Bits.i(Bits.i(Bits.i(Bits.e)))) 
// }