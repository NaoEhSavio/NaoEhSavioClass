// type MaybeBool
// It maybe holds a Boolean inside it
MaybeBool : Type
MaybeBool.none : MaybeBool
MaybeBool.some (value: Bool) : MaybeBool

// Returns true if Maybe is none
Is_none(a: MaybeBool): Bool
Is_none = ?

// Returns true if Maybe is some
Is_some(a: MaybeBool): Bool
Is_some a = ?

// Returns true if both inputs are identical
// eql(MaybeBool.none,             MaybeBool.none            ) -> true
// eql(MaybeBool.some(Bool.false), MaybeBool.none            ) -> false
// eql(MaybeBool.some(Bool.true),  MaybeBool.some(Bool.false)) -> false
// eql(MaybeBool.some(Bool.false), MaybeBool.some(Bool.false)) -> true
MaybeBool.eql (a: MaybeBool) (b:MaybeBool) : Bool
MaybeBool.eql a b = ?

// Returns the value inside the MaybeBool.
// If there is no value contained, returns v instead
MaybeBool.extract (a: MaybeBool) (v: Bool) : Bool
MaybeBool.extract  a v = ?
 
// Create a MaybeBool from a Boolean
// create(Bool.false) -> MaybeBool(Bool.false)
MaybeBool.create (a: Bool) : MaybeBool
MaybeBool.create a         = ?

// Returns the first input that is a MaybeBool.some
// Returns MaybeBool.none if both are MaybeBool.none
MaybeBool.or (a: MaybeBool) (b: MaybeBool): MaybeBool
MaybeBool.or  a b = ?

// Main {
// }