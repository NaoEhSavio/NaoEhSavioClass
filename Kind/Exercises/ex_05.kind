// Basic Exercises involving Pairs

type Pair <A: Type, B: Type> {
  new(fst: A, snd: B)
}

// Example:
// Swaps the elements of a pair
swap<A: Type, B: Type>(pair: Pair<A,B>): Pair<B,A>
  case pair {
    new: Pair.new<B,A>(pair.snd, pair.fst)
  }


// Returns the first element of a pair
first<A: Type, B: Type>(pair: Pair<A,B>): A
  case pair {
    new: pair.fst
}

// Returns the second element of a pair
second<A: Type, B: Type>(pair: Pair<A,B>): B
  case pair {
    new: pair.snd
  }

// Applies a function to both elements of a Pair
map<A: Type, B: Type>(fn: A -> B, pair: Pair<A,A>): Pair<B,B>
  case pair {
    new: Pair.new<B,B>(fn(pair.fst), fn(pair.snd))
  }
add(a: Nat, b: Nat): Nat
  case a { 
    zero: b
    succ: case b {
      zero: a
      succ: Nat.succ(Nat.succ(add(b.pred, a.pred)))
    }
  }
mul(a: Nat, b: Nat): Nat
  case a { 
    zero: Nat.zero
    succ: case b {
      zero: Nat.zero
      succ: add(b,(mul(a.pred, b)))
    }
  }

ex_05:_
  let a = {0, 1}
   map!!(mul(10),a)